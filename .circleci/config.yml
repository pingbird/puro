version: 2.1

orbs:
  aws-s3: circleci/aws-s3@3.0
  win: circleci/windows@4.1.1
  macos: circleci/macos@2.5.2

commands:
  install_dart:
    steps:
      - run:
          name: "Install Dart"
          command: |-
            cd ~/
            if [[ $OSTYPE == 'darwin'* ]]; then
              if [[ $(uname -m) == 'arm64' ]]; then
                echo "Running on ARM64 (Apple Silicon)"
                curl https://storage.googleapis.com/dart-archive/channels/$DART_RELEASE/release/$DART_VERSION/sdk/dartsdk-macos-arm64-release.zip -o dart-sdk.zip
              else
                echo "Running on Intel x64"
                curl https://storage.googleapis.com/dart-archive/channels/$DART_RELEASE/release/$DART_VERSION/sdk/dartsdk-macos-x64-release.zip -o dart-sdk.zip
              fi
              unzip dart-sdk.zip
              sudo ln -s `pwd`/dart-sdk/bin/dart /usr/local/bin/dart
            else
              wget https://storage.googleapis.com/dart-archive/channels/$DART_RELEASE/release/$DART_VERSION/linux_packages/dart_${DART_VERSION}-1_amd64.deb
              sudo dpkg -i dart_${DART_VERSION}-1_amd64.deb
            fi
            dart --version

  install_dart_windows:
    steps:
      - run:
          name: "Install Dart"
          command: |-
            Write-Output "Installing dart $env:DART_VERSION"
            choco install dart-sdk --version $env:DART_VERSION -y

  pub_get:
    steps:
      - run:
          name: "Pub Get"
          command: |-
            cd puro
            dart pub get

  pub_get_windows:
    steps:
      - run:
          name: "Pub Get"
          command: |-
            cd puro
            dart pub get

  format:
    steps:
      - run:
          name: "Format"
          command: |-
            dart format --set-exit-if-changed .

  analyze:
    steps:
      - run:
          name: "Analyze"
          command: |-
            dart analyze .

  test:
    steps:
      - run:
          name: "Test"
          command: |-
            cd puro
            dart test -r expanded

  build_puro:
    parameters:
      os_name:
        type: string
      build_args:
        type: string
    steps:
      - run:
          name: "Build"
          command: |-
            mkdir -p builds/<< parameters.os_name >>
            cd puro
            ./build.sh << parameters.build_args >>
            cp bin/puro ../builds/<< parameters.os_name >>/puro
      - persist_to_workspace:
          root: ~\project
          paths:
            - builds

  build_puro_windows:
    parameters:
      build_args:
        type: string
    steps:
      - run:
          name: "Build"
          command: |-
            mkdir builds\windows-x64
            cd puro
            .\build.ps1 << parameters.build_args >>
            cp bin/puro.exe ../builds/windows-x64/puro.exe
      - persist_to_workspace:
          root: C:\Users\circleci\project
          paths:
            - builds

  test_all:
    steps:
      - checkout
      - pub_get
      - format
      - analyze
      - test

  test_all_windows:
    steps:
      - checkout
      - pub_get_windows
      - format
      - analyze
      - test

jobs:
  linux_tests:
    environment: &dart_version
      DART_VERSION: "3.7.2"
      DART_RELEASE: "stable"
    docker:
      - image: cimg/base:stable
    steps:
      - install_dart
      - test_all

  linux_build:
    parameters:
      build_args:
        type: string
        default: ""
    environment: *dart_version
    docker:
      - image: cimg/base:stable
    steps:
      - install_dart
      - test_all
      - build_puro:
          os_name: linux-x64
          build_args: << parameters.build_args >>

  macos_build:
    parameters:
      build_args:
        type: string
        default: ""
    environment: *dart_version
    macos:
      xcode: 14.1.0
    steps:
      - macos/install-rosetta
      - install_dart
      - test_all
      - build_puro:
          os_name: darwin
          build_args: << parameters.build_args >>

  windows_build:
    parameters:
      build_args:
        type: string
        default: ""
    environment: *dart_version
    machine:
      image: windows-server-2019-vs2019:stable
      resource_class: windows.medium
      shell: powershell.exe -ExecutionPolicy Bypass
    steps:
      - install_dart_windows
      - test_all_windows
      - build_puro_windows:
          build_args: << parameters.build_args >>

  upload_master_builds:
    docker:
      - image: cimg/base:stable
    steps:
      - attach_workspace:
          at: workspace
      - run: workspace/builds/linux-x64/puro version --plain > workspace/builds/version
      - aws-s3/sync:
          from: workspace/builds/
          to: s3://puro/builds/master/
      - run: aws cloudfront create-invalidation --distribution-id $PURO_CF_DISTRIBUTION --paths "/builds/master/*"

  upload_release_builds:
    docker:
      - image: cimg/base:stable
    steps:
      - attach_workspace:
          at: workspace
      - aws-s3/sync:
          from: workspace/builds/
          to: s3://puro/builds/$CIRCLE_TAG/
      - run: echo "$CIRCLE_TAG" > latest
      - aws-s3/copy:
          from: latest
          to: s3://puro/builds/

  build_website:
    environment: *dart_version
    docker:
      - image: cimg/python:3.9
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints:
            - "SHA256:1YbB9MVvwbM84Dqz29ZFCNJyw6CMFRzugT9sWoah1cA"
      - run: cat ~/.ssh/config
      - install_dart
      - pub_get
      - run: |-
          ssh-keyscan -t rsa github.com >> ~/.ssh/known_hosts
          git clone git@github.com:pingbird/mkdocs-material-insiders.git
          pip install ./mkdocs-material-insiders
          dart puro/bin/puro.dart _generate-docs --deploy
          cd website
          export PYTHONPATH=`pwd`
          mkdocs build
          cd ..
          cp installer/install.sh website/site/
      - aws-s3/sync:
          from: website/site/
          to: s3://puro
      - run: aws cloudfront create-invalidation --distribution-id $PURO_CF_DISTRIBUTION --paths "/*"

workflows:
  master:
    jobs:
      - linux_build
      - macos_build
      - windows_build
      - upload_master_builds:
          requires:
            - linux_build
            - macos_build
            - windows_build
      - build_website
    when:
      equal: [ "master", << pipeline.git.branch >> ]

  tests:
    jobs:
      - linux_tests
    when:
      not:
        equal: [ "master", << pipeline.git.branch >> ]

  release:
    jobs:
      - linux_build:
          filters: &release-filters
            tags:
              only: /^([0-9]+)\.([0-9]+)\.([0-9]+)(?:-([0-9A-Za-z-]+(?:\.[0-9A-Za-z-]+)*))?(?:\+[0-9A-Za-z-]+)?$/
            branches:
              ignore: /.*/
          build_args: --release
      - macos_build:
          filters: *release-filters
          build_args: --release
      - windows_build:
          filters: *release-filters
          build_args: --release
      - upload_release_builds:
          filters: *release-filters
          requires:
            - linux_build
            - macos_build
            - windows_build
      - build_website:
          filters: *release-filters
          requires:
            - upload_release_builds
